generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling -> 클럽 문지기
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // provider = "sqlite"
  // url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  username   String     @unique
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?
  tokens     SMSToken[]
  products   Product[]  @relation("UserProducts")
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]
  reviews    Review[]
  buyers     Product[]  @relation("UserPurchases")
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  title       String
  price       Float
  description String
  photo       String

  user        User       @relation(name: "UserProducts", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  ChatRoom    ChatRoom[]
  reviews     Review[]
  status      String     @default("forsale")
  buyer       User?      @relation(name: "UserPurchases", fields: [buyerUserId], references: [id], onDelete: Cascade)
  buyerUserId Int?
}

model Post {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  title       String
  description String?
  views       Int       @default(0)
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  payload    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  //composite ID ??
  //like는 좋아요는 한 번 만 가능하다.
  //a라는 아이디로 x라는 포스트에 좋아요를 했다면
  //a와 x를 합치면 유니크한 아이디가 된다.
  //다른 유저와, 또는 다른 포스트와 중복될 일이 없다는 거지
  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  //ChatRoom의 id는 오토인크리먼트 자동증가 안함. 그리고 보안상의 이유로 string 설정
  id       String    @id @default(cuid())
  users    User[]
  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  user       User     @relation(fields: [userId], references: [id])
  room       ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String
  userId     Int
  isRead     Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Review {
  id            Int      @id @default(autoincrement())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  reviewMessage String?
  rating        Int

  //리뷰작성자
  user   User @relation(fields: [userId], references: [id])
  userId Int

  //리뷰 단 물품
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}
